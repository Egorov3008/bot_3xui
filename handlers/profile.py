from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot import bot
from database import get_balance, get_key_count, get_referral_stats
from handlers.texts import profile_message_send, invite_message_send, CHANNEL_LINK, get_referral_link


class ReplenishBalanceState(StatesGroup):
    choosing_transfer_method = State()
    waiting_for_admin_confirmation = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤
router = Router()


async def process_callback_view_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è, –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –∏ –±–∞–ª–∞–Ω—Å–µ. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

    Args:
        callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    tg_id = callback_query.from_user.id
    username = callback_query.from_user.full_name

    try:
        key_count = await get_key_count(tg_id)
        balance = await get_balance(tg_id)
        if balance is None:
            balance = 0

        profile_message = (
            profile_message_send(username, tg_id, balance, key_count)
        )

        profile_message += (
            f"<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b> <a href='{CHANNEL_LINK}'>–∑–¥–µ—Å—å</a>\n"
        )

        if key_count == 0:
            profile_message += "\n<i>–ù–∞–∂–º–∏—Ç–µ ‚ûï–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ VPN</i>"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        button_create_key = InlineKeyboardButton(text='‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='create_key')
        button_view_keys = InlineKeyboardButton(text='üì± –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', callback_data='view_keys')
        button_replenish_balance = InlineKeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='replenish_balance')
        button_invite = InlineKeyboardButton(text='üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', callback_data='invite')
        button_instructions = InlineKeyboardButton(text='üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
        button_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_menu')

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [button_create_key, button_view_keys],
            [button_replenish_balance],
            [button_invite, button_instructions],
            [button_back] ])

    except Exception as e:
            profile_message = f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}"
            keyboard = None

    await callback_query.message.delete()

    await bot.send_message(
        chat_id=tg_id,
        text=profile_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await callback_query.answer()


@router.callback_query(lambda c: c.data == 'invite')
async def invite_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    tg_id = callback_query.from_user.id
    referral_link = get_referral_link(tg_id)

    referral_stats = await get_referral_stats(tg_id)

    invite_message = (
        invite_message_send(referral_link, referral_stats)
    )

    button_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='view_profile')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_back]])

    await callback_query.message.delete()

    await bot.send_message(
        chat_id=tg_id,
        text=invite_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await callback_query.answer()


@router.callback_query(lambda c: c.data == 'view_profile')
async def view_profile_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º.

    Args:
        callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    await process_callback_view_profile(callback_query, state)

