from datetime import datetime, timedelta
import asyncpg
import asyncio
from aiogram import Bot
from aiogram.fsm.state import State, StatesGroup
import logging
from config import DATABASE_URL, ADMIN_USERNAME, ADMIN_PASSWORD, SERVERS
from database import get_balance, update_key_expiry, delete_key
from client import extend_client_key, delete_client
from auth import login_with_credentials
from handlers.texts import KEY_EXPIRY_10H, KEY_EXPIRY_24H, KEY_RENEWED, KEY_RENEWAL_FAILED, KEY_DELETED, \
    KEY_DELETION_FAILED
from aiogram import Router, types

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()


class NotificationStates(StatesGroup):
    waiting_for_notification_text = State()


async def notify_expiring_keys(bot: Bot):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–ª—é—á–∞—Ö, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –∏ 24 —á–∞—Å–∞,
    –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏.

    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    conn = None
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")

        current_time = datetime.utcnow().timestamp() * 1000
        threshold_time_10h = (datetime.utcnow() + timedelta(hours=10)).timestamp() * 1000
        threshold_time_24h = (datetime.utcnow() + timedelta(days=1)).timestamp() * 1000

        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

        await notify_10h_keys(bot, conn, current_time, threshold_time_10h)
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∑–∞ 10 —á–∞—Å–æ–≤ –∏ 24 —á–∞—Å–∞
        await notify_24h_keys(bot, conn, current_time, threshold_time_24h)
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π
        await handle_expired_keys(bot, conn, current_time)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        if conn:
            await conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


async def is_bot_blocked(bot: Bot, chat_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ.

    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        chat_id (int): ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.

    Returns:
        bool: True, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False.
    """
    try:
        member = await bot.get_chat_member(chat_id, bot.id)
        return member.status == 'left'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return False


async def notify_10h_keys(bot: Bot, conn: asyncpg.Connection, current_time: float, threshold_time_10h: float):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–ª—é—á–∞—Ö, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä

–ù–µ–π—Ä–æ–∫–æ—Ç, [11.12.2024 22:01]
—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 10 —á–∞—Å–æ–≤.

    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        conn (asyncpg.Connection): –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        current_time (float): –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
        threshold_time_10h (float): –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–ª—é—á–∏ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 10 —á–∞—Å–æ–≤.

    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 —á–∞—Å–æ–≤,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    records = await conn.fetch('''
        SELECT tg_id, email, expiry_time, client_id, server_id FROM keys 
        WHERE expiry_time <= $1 AND expiry_time > $2 AND notified = FALSE
    ''', threshold_time_10h, current_time)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 10 —á–∞—Å–æ–≤.")
    for record in records:
        tg_id = record['tg_id']
        email = record['email']
        expiry_time = record['expiry_time']
        server_id = record['server_id']
        expiry_date = datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')

        message = KEY_EXPIRY_10H.format(server_id=SERVERS[server_id]['name'], email=email, expiry_date=expiry_date)

        if not await is_bot_blocked(bot, tg_id):
            try:
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text='üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å VPN',
                                                callback_data=f'renew_key|{record["client_id"]}')],
                ])
                await bot.send_message(tg_id, message, reply_markup=keyboard)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
                continue

            await conn.execute('UPDATE keys SET notified = TRUE WHERE client_id = $1', record['client_id'])
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ notified –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {record['client_id']}.")

        await asyncio.sleep(1)


async def notify_24h_keys(bot: Bot, conn: asyncpg.Connection, current_time: float, threshold_time_24h: float):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–ª—é—á–∞—Ö, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤.

    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        conn (asyncpg.Connection): –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        current_tim

–ù–µ–π—Ä–æ–∫–æ—Ç, [11.12.2024 22:01]
e (float): –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
        threshold_time_24h (float): –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–ª—é—á–∏ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.

    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π...")

    records_24h = await conn.fetch('''
        SELECT tg_id, email, expiry_time, client_id, server_id FROM keys 
        WHERE expiry_time <= $1 AND expiry_time > $2 AND notified_24h = FALSE
    ''', threshold_time_24h, current_time)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records_24h)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞.")
    for record in records_24h:
        tg_id = record['tg_id']
        email = record['email']
        expiry_time = record['expiry_time']
        server_id = record['server_id']

        time_left = (expiry_time / 1000) - datetime.utcnow().timestamp()
        hours_left = max(0, int(time_left // 3600))

        expiry_date = datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')
        balance = await get_balance(tg_id)

        message_24h = KEY_EXPIRY_24H.format(server_id=SERVERS[server_id]['name'], email=email, hours_left=hours_left,
                                            expiry_date=expiry_date, balance=balance)

        if not await is_bot_blocked(bot, tg_id):
            try:
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text='üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å VPN',
                                                callback_data=f'renew_key|{record["client_id"]}')],
                ])
                await bot.send_message(tg_id, message_24h, reply_markup=keyboard)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
                continue

            await conn.execute('UPDATE keys SET notified_24h = TRUE WHERE client_id = $1', record['client_id'])
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ notified_24h –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {record['client_id']}.")

        await asyncio.sleep(1)

        await bot.send_message(tg_id, KEY_RENEWED, reply_markup=keyboard)


async def handle_expired_keys(bot: Bot, conn: asyncpg.Connection, current_time: float):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏, –ø—Ä–æ–≤–µ—Ä—è—è –∏—Ö –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–ª–µ–≤–∞—è –∏–ª–∏ —É–¥–∞–ª—è—è –∏—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - bot: Bot
        –û–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    - conn: asyncpg.Connection
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.
    - current_time: float
        –¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UNIX, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π.

    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∏, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫.
    - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å >= 100, –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –Ω–∞ 30 –¥–Ω–µ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å < 100, —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —ç—Ç–æ–º.
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π...")

    current_time = int(current_time)
    expiring_keys = await conn.fetch('''
        SELECT tg_id, client_id, expiry_time, server_id, email FROM keys 
        WHERE expiry_time <= $1
    ''', current_time)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring_keys)} –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∫–ª—é—á–µ–π.")

    for record in expiring_keys:
        tg_id = record['tg_id']
        client_id = record['client_id']
        balance = await get_balance(tg_id)
        server_id = record['server_id']
        email = record['email']

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id}: {balance}.")

        button_profile = types.InlineKeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[button_profile]])

        if balance >= 100:
            new_expiry_time = int((datetime.utcnow() + timedelta(days=30)).timestamp() * 1000)
            await update_key_expiry(client_id, new_expiry_time)
            logger.info(
                f"–ö–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id} –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {datetime.utcfromtimestamp(new_expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}.")

            session = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
            success = await extend_client_key(session, server_id, tg_id, client_id, email, new_expiry_time)
            if success:
                try:

                    logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–µ—Å—è—Ü.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
            else:
                try:
                    await bot.send_message(tg_id, KEY_RENEWAL_FAILED, reply_markup=keyboard)
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
        else:
            await delete_key(client_id)
            logger.info(f"–ö–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")

            session = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
            success = await delete_client(session, server_id, client_id)
            if success:
                try:
                    await bot.send_message(tg_id, KEY_DELETED, reply_markup=keyboard)
                    logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É–¥–∞–ª–µ–Ω.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
            else:
                try:
                    await bot.send_message(tg_id, KEY_DELETION_FAILED, reply_markup=keyboard)
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

        await asyncio.sleep(1)
